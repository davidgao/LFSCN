<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-bootable-kernel" role="wrap">
  <?dbhtml filename="kernel.html"?>

  <sect1info condition="script">
    <productname>linux</productname>
    <productnumber>&linux-version;</productnumber>
    <address>&linux-url;</address>
  </sect1info>

  <title>Linux-&linux-version;</title>

  <indexterm zone="ch-bootable-kernel">
    <primary sortas="a-Linux">Linux</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Linux 程序包包含 linux 内核。</para>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&linux-ch8-sbu;</seg>
        <seg>&linux-ch8-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装内核</title>

    <para>编制内核包含一些步骤&mdash;&mdash;配置，编译和安装。阅读内核源代码树中的 <filename>README</filename> 文件来获知不同于本书所述的配置内核方法。</para>

    <para>运行以下命令来准备编译：</para>

<screen><userinput remap="pre">make mrproper</userinput></screen>

    <para>这确保内核树完全干净。内核开发组建议先于每个内核编译运行此命令。不要期望内核树在 un-tarring 后保持干净。</para>

    <!-- Support for compiling a keymap into the kernel is deliberately removed -->

      <para>经由一个目录驱动的接口配置内核。查阅 <ulink url="&hints-root;kernel-configuration.txt"/> 来获得内核配置的常规信息。 BLFS 中有关某些需求 LFS 不包含的程序包的内核配置的一些信息可在 <ulink url="&blfs-root;view/svn/longindex.html#kernel-config-index"/> 找到。</para>

    <note><para>由于近期在 <application>udev</application> 中的改动，确保选择了：</para>
    
    <screen role="nodump">Device Drivers  ---&gt;
  Generic Driver Options  ---&gt;
     Maintain a devtmpfs filesystem to mount at /dev</screen></note>

<screen role="nodump"><userinput>make LANG=<replaceable>&lt;host_LANG_value&gt;</replaceable> LC_ALL= menuconfig</userinput></screen>

    <variablelist>
      <title>make 参数的含义：</title>

      <varlistentry>
        <term><parameter>LANG=&lt;host_LANG_value&gt; LC_ALL=</parameter></term>
        <listitem>
          <para>这建立区域设置为宿主所使用的。这对一个正确的 menuconfig ncurses 界面线在 UTF-8 linux 文本控制台上绘制是必须的。</para>

            <para>确保替换 <replaceable>&lt;host_LANG_value&gt;</replaceable> 为来自你的 host 的 <envar>$LANG</envar> 变量值。如果没有设置，你可以使用 host 的 <envar>$LC_ALL</envar> 或 <envar>$LC_CTYPE</envar> 的值。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>可以替代地， <command>make oldconfig</command> 在一些场合可能更加合适。查阅 <filename>README</filename> 文件来获得更多信息。</para>

      <para>如果需要，通过拷贝宿主系统的内核配置文件 <filename>.config</filename> (这里默认它可用) 到未打包的 <filename class="directory">linux-&linux-version;</filename> 目录，来跳过内核配置。但是我们不推荐如此做。探索整个配置菜单并白手起家创建一个内核配置通常更好。</para>

    <para>编译内核镜像和模块：</para>

<screen><userinput remap="make">make</userinput></screen>

      <para>如果使用内核模块， <filename class="directory">/etc/modprobe.d</filename> 中的模块配置可能被需要。关于模块和内核配置的信息位于 <xref linkend="ch-scripts-udev"/>linux-&linux-version;/Documentation</filename> 目录。同时， <filename>modprobe.conf(5)</filename> 可能包含需要的信息。</para>

    <para>如果内核配置需要，安装这些模块：</para>

<screen><userinput remap="install">make modules_install</userinput></screen>

    <para>在内核编译完成后，需要额外的步骤来完成安装。一些文件需要被拷贝到 <filename class="directory">/boot</filename> 目录。</para>

    <para>到内核镜像的路径可能根据所使用的平台而改变。下面的文件名可根据你的喜好改变，但文件名的主干必须是 <emphasis>vmlinuz</emphasis> 以和下个部分中的提及的引导进程自动安装相兼容。以下的命令默认在 x86 架构上运行：</para>

<screen><userinput remap="install">cp -v arch/x86/boot/bzImage /boot/vmlinuz-&linux-version;-lfs-&version;</userinput></screen>

    <para><filename>System.map</filename> 是内核的一个符号文件。它映射内核 API 中的每个函数的函数入口点以及正在运行的内核的内核数据结构地址。它被用作调查内核问题时的一个资源。运行以下命令来安装映射文件：</para>

<screen><userinput remap="install">cp -v System.map /boot/System.map-&linux-version;</userinput></screen>

    <para>由上面的 <command>make menuconfig</command> 步骤生成的内核配置文件 <filename>.config</filename> 包含所有刚刚被编译的内核配置选项。保存此文件以备日后查阅是一个好主意：</para>

<screen><userinput remap="install">cp -v .config /boot/config-&linux-version;</userinput></screen>

    <para>安装 Linux 内核文档：</para>

<screen><userinput remap="install">install -d /usr/share/doc/linux-&linux-version;
cp -r Documentation/* /usr/share/doc/linux-&linux-version;</userinput></screen>

    <para>注意内核源目录中的文件不属于 <emphasis>root</emphasis> 是很重要的。每当一个程序包被以用户 <emphasis>root</emphasis> 解压 (就像我们在 chroot 中做的那样) ，文件得到打包者的电脑上的用户和组 ID 。这对其他任何要安装的程序包通常不成问题，鉴于源代码树在安装后移除。然而 Linux 源代码树通常会保存较长的时间。因此，打包者使用的 ID 有机会被赋值到机器上的某处。那个人将会得到修改内核源代码的权限。</para>

    <para>如果内核源代码树要被保存，在 <filename class="directory">linux-&linux-version;</filename> 目录运行 <command>chown -R 0:0</command> 来确保所有文件被用户 <emphasis>root</emphasis> 所有。</para>

    <warning>
      <para>一些内核文档建议创建一个从 <filename class="symlink">/usr/src/linux</filename> 指向内核源代码目录的符号链接。这是针对 2.6 之前版本内核的并且 <emphasis>一定不要</emphasis> 在一个 LFS 系统上创建，因为它可能在你在基本 LFS 系统完成后试图编制程序包时造成问题。</para>
    </warning>

    <warning>
      <para>系统的 <filename class="directory">include</filename> 目录下的头文件应该 <emphasis>始终</emphasis> 和 Glibc 一起编译，也就是说，来自这个 Linux 系统内核中 tarball 的纯净头文件。这样一来，它们应当 <emphasis>永不</emphasis> 被原始的内核头文件或任何其他内核纯净头文件替换。</para>
    </warning>

  </sect2>

  <sect2 id="conf-modprobe" role="configuration">
    <title>配置 Linux 模块加载序列</title>

    <indexterm zone="conf-modprobe">
      <primary sortas="e-/etc/modprobe.d/usb.conf">/etc/modprobe.d/usb.conf</primary>
    </indexterm>

    <para><filename>/etc/modprobe.d/usb.conf</filename> 需要被创建。这样一来，如果 USB 驱动 (ehci_hcd， ohci_hcd 和 uhci_hcd) 已被编制为模块，他们会按正确的序列被加载；ehci_hcd 需要先于 ohci_hcd 和 uhci_hcd 被加载以避免引导时输出警告。</para>

    <para>运行以下命令来创建一个新 <filename>/etc/modprobe.d/usb.conf</filename>  文件：</para>

<screen><userinput>install -v -m755 -d /etc/modprobe.d
cat &gt; /etc/modprobe.d/usb.conf &lt;&lt; "EOF"
<literal># Begin /etc/modprobe.d/usb.conf

install ohci_hcd /sbin/modprobe ehci_hcd ; /sbin/modprobe -i ohci_hcd ; true
install uhci_hcd /sbin/modprobe ehci_hcd ; /sbin/modprobe -i uhci_hcd ; true

# End /etc/modprobe.d/usb.conf</literal>
EOF</userinput></screen>

  </sect2>

  <sect2 id="contents-kernel" role="content">
    <title>Linux 的内容</title>

    <segmentedlist>
      <segtitle>安装的文件</segtitle>
      <segtitle>安装的目录</segtitle>

      <seglistitem>
        <seg>config-&linux-version;、vmlinux-&linux-version;-lfs-&version;-&linux-version; 和 System.map-&linux-version;</seg>
        <seg>/lib/modules、/usr/share/doc/linux-&linux-version;</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简介</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="config">
        <term><filename>config-&linux-version;</filename></term>
        <listitem>
          <para>包含所有内核配置选项</para>
          <indexterm zone="ch-bootable-kernel config">
            <primary sortas="e-/boot/config">/boot/config-&linux-version;</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lfskernel">
        <term><filename>vmlinux-&linux-version;-lfs-&version;</filename></term>
        <listitem>
          <para>Linux 系统的引擎。当开启电脑时，内核是运行系统中首先被加载的部分。它检测并初始化电脑硬件的所有组件，然后让这些组件以一个文件树的形式对软件可用并转换一个单个的 CPU 为可以看上去是同时地运行大量程序的多线程机</para>
          <indexterm zone="ch-bootable-kernel lfskernel">
            <primary sortas="b-lfskernel">lfskernel-&linux-version;</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="System.map">
        <term><filename>System.map-&linux-version;</filename></term>
        <listitem>
          <para>一个地址和符号的列表；它映射内核中所有函数和数据结构的入口点和地址</para>
          <indexterm zone="ch-bootable-kernel System.map">
            <primary sortas="e-/boot/System.map">/boot/System.map-&linux-version;</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
